#######################
index_reverse<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time & #Constant in scenario 2
data$Species_name==sp &
data$Number_of_introduction_events != 1 & #Multiple introduction events
data$Position_in_sequence == 1) #Species must arrive in position 1
if (length(index_reverse)>0) {
#Check species composition (2 arrival scenarios must involve the same species)
for (j in index_reverse){
sp_in_reverse_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==data$Sequence_ID[j] &
data$Environment_ID==envir])) #Get species list for reverse sequence
if (identical(sp_in_sequence, sp_in_reverse_sequence)) {
es_list$row_control_reverse<-j #Store row index in list if there is a match
break #Exit loop
}}}
if (is.null(es_list$row_control_reverse)) {index_reverse<-NULL} else {index_reverse<-es_list$row_control_reverse}
###########################
#Find synchronous scenario
###########################
index_sync<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time & #Constant in scenario 2
data$Species_name==sp &
data$Number_of_introduction_events == 1 & #Only one introduction event
data$Position_in_sequence == 1) #Species must arrive in position 1
if (length(index_sync)>0) {
#Check species composition (2 arrival scenarios must involve the same species)
for (j in index_sync){
sp_in_sync_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==data$Sequence_ID[j] &
data$Environment_ID==envir])) #Get species list for synchronous sequence
if (identical(sp_in_sequence, sp_in_sync_sequence)) {
es_list$row_control_sync<-j #Store row index in list if there is a match
break #Exit loop
}}}
if (is.null(es_list$row_control_sync)) {index_sync<-NULL} else {index_sync<-es_list$row_control_sync}
##############################################
#Calculate effect sizes using metafor package
##############################################
if (is.null(index_reverse)==FALSE){
#Calculate effect size using the reverse scenario
es_list$es_reverse<-cbind(es_list$es_reverse,
escalc(measure=measure,
m1i=data$Avg_value_original[i],
sd1i=data$SD_value[i],
n1i=data$n_value[i],
m2i=data$Avg_value_original[index_reverse],
sd2i=data$SD_value[index_reverse],
n2i=data$n_value[index_reverse]))
}
if (is.null(index_sync)==FALSE) {
#Calculate effect size using the synchronous scenario
es_list$es_sync<-cbind(es_list$es_sync,
escalc(measure=measure,
m1i=data$Avg_value_original[i],
sd1i=data$SD_value[i],
n1i=data$n_value[i],
m2i=data$Avg_value_original[index_sync],
sd2i=data$SD_value[index_sync],
n2i=data$n_value[index_sync]))
}
results[[i]]<-es_list
}
return(results)
}
data <- read.csv("~/Postdoc/sPRIORITY/Meta-analysis/sPriority_database_230411_BD.csv")[1:855,]
data<-data%>%
filter(Number_of_species_in_sequence==2)
test<-get_effect_sizes(data=data,
time_unit="Days",
scenario=2,
measure="SMD")
test
test[[280]]
test[[280]]$es_reverse$yi
get_effect_sizes<-function(data,
time_unit=NULL,
scenario=2,
measure="SMD"){
#data is a dataframe with the raw data from the sPriority database
#If not NULL, time_unit can be either "Hours", "Days", "Weeks", "Months" or "Years"
#Set time_unit=NULL if time units do not have to be standardised across studies
#There are two possible scenarios to calculate an effect size
# Scenario 1: keep the time lag between the arrival of the target species or species group and the measurement constant
# Scenario 2: keep the time lag between the start of the experiment and the measurement (time_since_start) constant
#measure is a character string to specify which effect size should be calculated (see metafor::escalc).
#measure can be:
#"MD": raw mean difference
#"SMD" (default), standardised mean difference (Hedges' g)
#"SMDH": standardised mean difference with heteroscedastic population variances in the two groups
#"SMD1": standardised mean difference where the mean difference is divided by the standard deviation of the second group
#"SMD1H": same as SMD1, but with heteroscedastic population variances
#"ROM": log transformed ratio of means
#Error interceptions
if (is.null(time_unit)==FALSE) {
if (time_unit=="Hours"|time_unit=="Days"|time_unit=="Weeks"|time_unit=="Months"|time_unit=="Years") {}
else {stop("time_unit must be Hours, Days, Weeks, Months, or Years")}
}
if (scenario==1|scenario==2) {} else {stop("scenario must be 1 or 2")}
if (measure=="MD"|measure=="SMD"|measure=="SMDH"|measure=="SMD1"|measure=="SMD1H"|measure=="ROM") {}
else {stop("measure must be MD, SMD, SMDH, SMD1, SMD1H, ROM. See metafor::escalc for more information.")}
#Standardise time units if time_unit is not NULL
if (is.null(time_unit)==FALSE) {data<-standardise_time_units(data, time=time_unit)}
#Create list to store effect sizes
results<-vector("list", nrow(data)) #Pre-allocate an empty list to store results
#Loop over data
for (i in 1:nrow(data)){ #For each observation in data
if (data$Number_of_introduction_events[i] != 1 & data$Position_in_sequence[i] != 1){
#If this is not a synchronous arrival sequence AND the species is not among the first to arrive,
#then do the following:
#Create list to store results
es_list<-list(row_target=i,
row_control_reverse=NULL,
row_control_sync=NULL,
es_reverse=data[i,],
es_sync=data[i,])
#Get infos about observation
paper<-data$Paper_ID[i] #Get paper ID
envir<-data$Environment_ID[i] #Get environment ID
seq<-data$Sequence_ID[i] #Get sequence ID
time<-data$Time_after_start[i] #Get time point
sp<-data$Species_name[i] #Get species name
#Get species list for inoculation sequence
sp_in_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==seq &
data$Environment_ID==envir]))
#Find the right reference situation
if (scenario==1){
#Scenario 1: keep the time lag between the arrival of the target species or species group
#and the measurement constant
#Find reverse scenario
#Find synchronous scenario
}
if (scenario==2){
#Scenario 2: keep the time lag between the start of the experiment
#and the measurement (time_since_start) constant
#######################
#Find reverse scenario
#######################
index_reverse<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time & #Constant in scenario 2
data$Species_name==sp &
data$Number_of_introduction_events != 1 & #Multiple introduction events
data$Position_in_sequence == 1) #Species must arrive in position 1
if (length(index_reverse)>0) {
#Check species composition (2 arrival scenarios must involve the same species)
for (j in index_reverse){
sp_in_reverse_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==data$Sequence_ID[j] &
data$Environment_ID==envir])) #Get species list for reverse sequence
if (identical(sp_in_sequence, sp_in_reverse_sequence)) {
es_list$row_control_reverse<-j #Store row index in list if there is a match
break #Exit loop
}}}
if (is.null(es_list$row_control_reverse)) {index_reverse<-NULL} else {index_reverse<-es_list$row_control_reverse}
###########################
#Find synchronous scenario
###########################
index_sync<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time & #Constant in scenario 2
data$Species_name==sp &
data$Number_of_introduction_events == 1 & #Only one introduction event
data$Position_in_sequence == 1) #Species must arrive in position 1
if (length(index_sync)>0) {
#Check species composition (2 arrival scenarios must involve the same species)
for (j in index_sync){
sp_in_sync_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==data$Sequence_ID[j] &
data$Environment_ID==envir])) #Get species list for synchronous sequence
if (identical(sp_in_sequence, sp_in_sync_sequence)) {
es_list$row_control_sync<-j #Store row index in list if there is a match
break #Exit loop
}}}
if (is.null(es_list$row_control_sync)) {index_sync<-NULL} else {index_sync<-es_list$row_control_sync}
##############################################
#Calculate effect sizes using metafor package
##############################################
if (is.null(index_reverse)==FALSE){
#Calculate effect size using the reverse scenario
es_list$es_reverse<-cbind(es_list$es_reverse,
escalc(measure=measure,
m1i=data$Avg_value_original[i],
sd1i=data$SD_value[i],
n1i=data$n_value[i],
m2i=data$Avg_value_original[index_reverse],
sd2i=data$SD_value[index_reverse],
n2i=data$n_value[index_reverse]))
}
else {es_list$es_reverse<-NULL}
if (is.null(index_sync)==FALSE) {
#Calculate effect size using the synchronous scenario
es_list$es_sync<-cbind(es_list$es_sync,
escalc(measure=measure,
m1i=data$Avg_value_original[i],
sd1i=data$SD_value[i],
n1i=data$n_value[i],
m2i=data$Avg_value_original[index_sync],
sd2i=data$SD_value[index_sync],
n2i=data$n_value[index_sync]))
}
else {es_list$es_sync<-NULL}
}
results[[i]]<-es_list
}
return(results)
}
#Test function
test<-get_effect_sizes(data=data,
time_unit="Days",
scenario=2,
measure="SMD")
tes[[1]]
test[[1]]
test[[63]]
test[[280]]
test[[279]]
test[[278]]
class(test[[278]]$es_reverse)
test[[278]]$row_control_sync
do.call(Map, c(f = rbind, test))
rbind(test[[c(278,280)]]$es_reverse)
test[[c(278,280)]]
test[[278:280]]
test[278:280]
test[278:280]$row_target
test[278:280][1]
test[63]
es_table<-function(x){
#x is a list created by get_effect_sizes
k_reverse<-0
k_sync<-0
for (i in 1:length(x)){
if (is.null(x[[i]]$row_control_reverse)==FALSE){
k_reverse<-k_reverse+1
if (k_reverse==1) {data_reverse<-x[[i]]$es_reverse}
else {data_reverse<-rbind(data_reverse, x[[i]]$es_reverse)}}
if (is.null(x[[i]]$row_control_sync)==FALSE){
k_sync<-k_sync+1
if (k_sync==1) {data_sync<-x[[i]]$es_sync}
else {data_sync<-rbind(data_sync, x[[i]]$es_sync)}}
}
data_reverse$reference_scenario<-"Reverse"
data_sync$reference_scenario<-"Synchronous"
data<-rbind(data_reverse, data_sync)
data<-data[order(data$Paper_ID, data$Observation_ID),]
return(data)
}
table<-es_table(test)
View(table)
plot(table$yi, table$vi)
plot(table$yi, table$Time_since_first_intro)
plot(table$yi, table$Time_after_start)
table %>%
filter(PaperID==119) %>%
pivot_wider(names_from=reference_scenario,
values_from=yi)
table %>%
filter(Paper_ID==119) %>%
pivot_wider(names_from=reference_scenario,
values_from=yi)
table<-table %>%
filter(Paper_ID==119) %>%
pivot_wider(names_from=reference_scenario,
values_from=yi)
plot(na.omit(table$Reverse), na.omit(table$Synchronous))
View(table)
unique(table$Paper_ID)
table<-es_table(test)
table<-table %>%
filter(Paper_ID==119) %>%
pivot_wider(names_from=reference_scenario,
values_from=yi)
table<-es_table(test)
unique(data$Paper_ID)
unique(table$Paper_ID)
i<-137
data$Number_of_introduction_events[i]
data$Position_in_sequence[i]
es_list<-list(row_target=i,
row_control_reverse=NULL,
row_control_sync=NULL,
es_reverse=data[i,],
es_sync=data[i,])
paper<-data$Paper_ID[i] #Get paper ID
envir<-data$Environment_ID[i] #Get environment ID
seq<-data$Sequence_ID[i] #Get sequence ID
time<-data$Time_after_start[i] #Get time point
sp<-data$Species_name[i] #Get species name
sp
sp_in_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==seq &
data$Environment_ID==envir]))
sp_in_sequence
index_reverse<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time & #Constant in scenario 2
data$Species_name==sp &
data$Number_of_introduction_events != 1 & #Multiple introduction events
data$Position_in_sequence == 1) #Species must arrive in position 1
index_reverse
get_effect_sizes<-function(data,
time_unit=NULL,
scenario=2,
measure="SMD"){
#data is a dataframe with the raw data from the sPriority database
#If not NULL, time_unit can be either "Hours", "Days", "Weeks", "Months" or "Years"
#Set time_unit=NULL if time units do not have to be standardised across studies
#There are two possible scenarios to calculate an effect size
# Scenario 1: keep the time lag between the arrival of the target species or species group and the measurement constant
# Scenario 2: keep the time lag between the start of the experiment and the measurement (time_since_start) constant
#measure is a character string to specify which effect size should be calculated (see metafor::escalc).
#measure can be:
#"MD": raw mean difference
#"SMD" (default), standardised mean difference (Hedges' g)
#"SMDH": standardised mean difference with heteroscedastic population variances in the two groups
#"SMD1": standardised mean difference where the mean difference is divided by the standard deviation of the second group
#"SMD1H": same as SMD1, but with heteroscedastic population variances
#"ROM": log transformed ratio of means
#Error interceptions
if (is.null(time_unit)==FALSE) {
if (time_unit=="Hours"|time_unit=="Days"|time_unit=="Weeks"|time_unit=="Months"|time_unit=="Years") {}
else {stop("time_unit must be Hours, Days, Weeks, Months, or Years")}
}
if (scenario==1|scenario==2) {} else {stop("scenario must be 1 or 2")}
if (measure=="MD"|measure=="SMD"|measure=="SMDH"|measure=="SMD1"|measure=="SMD1H"|measure=="ROM") {}
else {stop("measure must be MD, SMD, SMDH, SMD1, SMD1H, ROM. See metafor::escalc for more information.")}
#Standardise time units if time_unit is not NULL
if (is.null(time_unit)==FALSE) {data<-standardise_time_units(data, time=time_unit)}
#Create list to store effect sizes
results<-vector("list", nrow(data)) #Pre-allocate an empty list to store results
#Loop over data
for (i in 1:nrow(data)){ #For each observation in data
if (data$Number_of_introduction_events[i] != 1 & data$Position_in_sequence[i] != 1){
#If this is not a synchronous arrival sequence AND the species is not among the first to arrive,
#then do the following:
#Create list to store results
es_list<-list(row_target=i,
row_control_reverse=NULL,
row_control_sync=NULL,
es_reverse=data[i,],
es_sync=data[i,])
#Get infos about observation
paper<-data$Paper_ID[i] #Get paper ID
envir<-data$Environment_ID[i] #Get environment ID
seq<-data$Sequence_ID[i] #Get sequence ID
time<-data$Time_after_start[i] #Get time point
sp<-data$Species_name[i] #Get species name
#Get species list for inoculation sequence
sp_in_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==seq &
data$Environment_ID==envir]))
#Find the right reference situation
if (scenario==1){
#Scenario 1: keep the time lag between the arrival of the target species or species group
#and the measurement constant
#######################
#Find reverse scenario
#######################
index_reverse<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time-data$Time_since_first_intro[i] &
data$Species_name==sp &
data$Number_of_introduction_events != 1 & #Multiple introduction events
data$Position_in_sequence == 1) #Species must arrive in position 1
if (length(index_reverse)>0) {
#Check species composition (2 arrival scenarios must involve the same species)
for (j in index_reverse){
sp_in_reverse_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==data$Sequence_ID[j] &
data$Environment_ID==envir])) #Get species list for reverse sequence
if (identical(sp_in_sequence, sp_in_reverse_sequence)) {
es_list$row_control_reverse<-j #Store row index in list if there is a match
break #Exit loop
}}}
if (is.null(es_list$row_control_reverse)) {index_reverse<-NULL} else {index_reverse<-es_list$row_control_reverse}
###########################
#Find synchronous scenario
###########################
index_sync<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time-data$Time_since_first_intro[i] &
data$Species_name==sp &
data$Number_of_introduction_events == 1 & #Only one introduction event
data$Position_in_sequence == 1) #Species must arrive in position 1
if (length(index_sync)>0) {
#Check species composition (2 arrival scenarios must involve the same species)
for (j in index_sync){
sp_in_sync_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==data$Sequence_ID[j] &
data$Environment_ID==envir])) #Get species list for synchronous sequence
if (identical(sp_in_sequence, sp_in_sync_sequence)) {
es_list$row_control_sync<-j #Store row index in list if there is a match
break #Exit loop
}}}
if (is.null(es_list$row_control_sync)) {index_sync<-NULL} else {index_sync<-es_list$row_control_sync}
##############################################
#Calculate effect sizes using metafor package
##############################################
if (is.null(index_reverse)==FALSE){
#Calculate effect size using the reverse scenario
es_list$es_reverse<-cbind(es_list$es_reverse,
escalc(measure=measure,
m1i=data$Avg_value_original[i],
sd1i=data$SD_value[i],
n1i=data$n_value[i],
m2i=data$Avg_value_original[index_reverse],
sd2i=data$SD_value[index_reverse],
n2i=data$n_value[index_reverse]))
}
else {es_list$es_reverse<-NULL}
if (is.null(index_sync)==FALSE) {
#Calculate effect size using the synchronous scenario
es_list$es_sync<-cbind(es_list$es_sync,
escalc(measure=measure,
m1i=data$Avg_value_original[i],
sd1i=data$SD_value[i],
n1i=data$n_value[i],
m2i=data$Avg_value_original[index_sync],
sd2i=data$SD_value[index_sync],
n2i=data$n_value[index_sync]))
}
else {es_list$es_sync<-NULL}
}
if (scenario==2){
#Scenario 2: keep the time lag between the start of the experiment
#and the measurement (time_since_start) constant
#######################
#Find reverse scenario
#######################
index_reverse<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time & #Constant in scenario 2
data$Species_name==sp &
data$Number_of_introduction_events != 1 & #Multiple introduction events
data$Position_in_sequence == 1) #Species must arrive in position 1
if (length(index_reverse)>0) {
#Check species composition (2 arrival scenarios must involve the same species)
for (j in index_reverse){
sp_in_reverse_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==data$Sequence_ID[j] &
data$Environment_ID==envir])) #Get species list for reverse sequence
if (identical(sp_in_sequence, sp_in_reverse_sequence)) {
es_list$row_control_reverse<-j #Store row index in list if there is a match
break #Exit loop
}}}
if (is.null(es_list$row_control_reverse)) {index_reverse<-NULL} else {index_reverse<-es_list$row_control_reverse}
###########################
#Find synchronous scenario
###########################
index_sync<-which(data$Paper_ID==paper &
data$Environment_ID==envir &
data$Time_after_start==time & #Constant in scenario 2
data$Species_name==sp &
data$Number_of_introduction_events == 1 & #Only one introduction event
data$Position_in_sequence == 1) #Species must arrive in position 1
if (length(index_sync)>0) {
#Check species composition (2 arrival scenarios must involve the same species)
for (j in index_sync){
sp_in_sync_sequence<-sort(unique(data$Species_name[data$Paper_ID==paper &
data$Sequence_ID==data$Sequence_ID[j] &
data$Environment_ID==envir])) #Get species list for synchronous sequence
if (identical(sp_in_sequence, sp_in_sync_sequence)) {
es_list$row_control_sync<-j #Store row index in list if there is a match
break #Exit loop
}}}
if (is.null(es_list$row_control_sync)) {index_sync<-NULL} else {index_sync<-es_list$row_control_sync}
##############################################
#Calculate effect sizes using metafor package
##############################################
if (is.null(index_reverse)==FALSE){
#Calculate effect size using the reverse scenario
es_list$es_reverse<-cbind(es_list$es_reverse,
escalc(measure=measure,
m1i=data$Avg_value_original[i],
sd1i=data$SD_value[i],
n1i=data$n_value[i],
m2i=data$Avg_value_original[index_reverse],
sd2i=data$SD_value[index_reverse],
n2i=data$n_value[index_reverse]))
}
else {es_list$es_reverse<-NULL}
if (is.null(index_sync)==FALSE) {
#Calculate effect size using the synchronous scenario
es_list$es_sync<-cbind(es_list$es_sync,
escalc(measure=measure,
m1i=data$Avg_value_original[i],
sd1i=data$SD_value[i],
n1i=data$n_value[i],
m2i=data$Avg_value_original[index_sync],
sd2i=data$SD_value[index_sync],
n2i=data$n_value[index_sync]))
}
else {es_list$es_sync<-NULL}
}
results[[i]]<-es_list
}
return(results)
}
#Test function
test<-get_effect_sizes(data=data,
time_unit="Days",
scenario=1,
measure="SMD")
table<-es_table(test)
View(table)
test[[100]]
View(data)
data[c(100,117),]
